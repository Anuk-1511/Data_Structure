class Solution{
  public:
    Node* constructBinaryTreeUtil(int pre[], int preM[], int &preIndex, int l,int h,int size)
    {
    	if (preIndex >= size || l > h)
    		return NULL;
    	Node* root = new Node(pre[preIndex]);
    	++(preIndex);
    	if (l == h)	return root;
    	int i;
    	for (i = l; i <= h; ++i)if (pre[preIndex] == preM[i])break;
    	if (i <= h)
    	{
    		root->left = constructBinaryTreeUtil (pre, preM, preIndex, i, h, size);
    		root->right = constructBinaryTreeUtil (pre, preM, preIndex, l+1, i-1, size);
    	}
    	return root; 
    }
    Node* constructBinaryTree(int pre[], int preMirror[], int size)
    {
        // Code here
    	int preIndex = 0;
    	int preMIndex = 0;
    	Node *root = constructBinaryTreeUtil(pre, preMirror, preIndex, 0, size-1, size);
    	return root;
    }
};
