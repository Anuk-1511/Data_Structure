#include<vector>
class Solution{
    bool checkpalindrome(vector<int> arr){
        int n = arr.size();
        int s = 0;
        int e = n-1;
        
        while(s<=e)
        {
            if(arr[s] != arr[e])
            {
                return false;
            }
            s++;
            e--;
        }
        return true;
    }
  public:
  
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        
        vector<int> arr;
        Node* temp = head;
        while(temp != NULL)
        {
            arr.push_back(temp->data);
            temp = temp->next;
        }
        return checkpalindrome(arr);
    }
};





Approach -2
class Solution{
    
    Node* getmid(Node* head)
    {
        Node* slow = head;
        Node* fast = head-> next;
        
        while(fast!= NULL && fast->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    
    Node* reverse(Node* head)
    {
        Node* curr =head;
        Node* prev =NULL;
        Node* next = NULL;
        
        while(curr!=NULL)
        {
            next =curr ->next;
            curr -> next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        
        if(head == NULL || head->next == NULL)
        {
            return true;
        }
        
        Node* mid = getmid(head);
        
        Node* temp = mid->next;
        
        mid->next = reverse(temp);
        
        
        Node* head1 = head;
        Node* head2 = mid->next;
        
        while(head2 != NULL)
        {
            if(head1->data != head2->data)
            {
                return false;
            }
            
            head1 = head1 ->next;
            head2 = head2->next;
        }
        
        temp = mid->next;
        mid ->next = reverse(temp);
        
        return true;
        
        
    }
};
