/*************************************************************
    Following is the Binary Serach Tree node structure

    template <typename T>
    class TreeNode
    {
    public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/
void inorder(TreeNode<int>* root,  vector<int> &in){
    if(root == NULL)
       return ;

    inorder(root->left,in);
    in.push_back(root->data);
    inorder(root->right,in);
}

TreeNode<int>* inorderbst(int s ,int e , vector<int> &inval)
{
    //base case
    if(s>e)
    {
        return NULL;

    }
    int mid = s + (e-s)/2;

    TreeNode<int>* root = new TreeNode<int>(inval[mid]);
    root->left = inorderbst(s,mid-1,inval);
    root->right = inorderbst(mid+1,e,inval);

    return root;

}
TreeNode<int>* balancedBst(TreeNode<int>* root) {
    // Write your code here.

    vector<int> inval;
    inorder(root,inval);
    int n = inval.size()-1;

    int s =0 , e =n;
    
    return inorderbst(s,e,inval);
    

}
