#include <bits/stdc++.h> 
bool isafe(int newx,int newy,vector<vector<bool>>&vi,vector < vector < int >> & arr,int n){

    if((newx >=0 && newx<n) && (newy >= 0 && newy<n) &&
        vi[newx][newy] != 1 && arr[newx][newy] == 1)
        {
            return true;

        }
    else{
        return false;
    }
}
void solve(int x,int y ,vector < vector < int >> & arr, int n, 
               vector<string> &ans,vector<vector<bool>>&vi , string path){

                  //base case

                  if(x==n-1 && y == n-1)
                  {
                      ans.push_back(path);
                      return;

                  } 

                  vi[x][y] = 1;
                  //down
                  if(isafe(x+1,y,vi,arr,n))
                  {
                      
                      solve(x+1,y,arr,n,ans,vi,path + 'D');
                      
                  }
                  
                  //left
                  if(isafe(x,y-1,vi,arr,n))
                  {
                      
                      solve(x,y-1,arr,n,ans,vi,path + 'L');
                      
                  }
                  //right
                  if(isafe(x,y+1,vi,arr,n))
                  {
                      
                      solve(x,y+1,arr,n,ans,vi,path + 'R');
                      
                  }

                  //up
                  if(isafe(x-1,y,vi,arr,n))
                  {
                      
                      solve(x-1,y,arr,n,ans,vi,path + 'U');
                      
                  }
                  vi[x][y]=0;
               }
vector < string > searchMaze(vector < vector < int >> & arr, int n) {
    // Write your code here.
     vector<string> ans;
     vector< vector <bool> >vi (n,vector<bool>(n,0));
     string path ="";
     if(arr[0][0] == 0)
        return ans;

     solve(0,0,arr,n,ans,vi,path);
     return ans;
}
