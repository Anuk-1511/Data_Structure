/**
 * Definition of linked list
 * class ListNode {
 *     int val;
 *     ListNode* next;
 *     ListNode(int val = 0) {
 *         this -> val = val;
 *     }
 *     ListNode(int val, ListNode* next) {
 *         this -> val = val;
 *         this -> next = next;
 *     }
 * }
 */
void insertAtTail(ListNode* &head,ListNode* &tail,int d)
{
    ListNode* newnode=new ListNode(d);
    if(head==NULL)
    {
        head=newnode;
        tail=newnode;
        return;
    }
    else
    {
        tail->next=newnode;
        tail=newnode;
    }
}
ListNode* reverse(ListNode* &head)
{
    ListNode* prev=NULL;
    ListNode* curr=head;
    ListNode* next=NULL;
    while(curr!=NULL)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
ListNode* add(ListNode* first, ListNode* second)
 {
       int carry = 0;
        ListNode*  ansHead = NULL;
        ListNode*  ansTail = NULL;
        while (first != NULL || second != NULL || carry != 0) {
          int val1 = 0;
          if (first != NULL)
            val1 = first->val;
          int val2 = 0;
          if (second != NULL)
            val2 = second->val;

          int sum = carry + val1 + val2;
          int digit = sum % 10;
          // create node and add in answer Linked List

          insertAtTail(ansHead, ansTail, digit);
          carry = sum / 10;

          if (first != NULL)
            first = first->next;
          if (second != NULL)
            second = second->next;
        }
        return ansHead;
}

 

ListNode* addOneToLinkedList(ListNode* head) 

{

    //step 1:reverse the LL

   head=reverse(head);

 

   ListNode* oneLL=new ListNode(1);

   ListNode* ans=add(head,oneLL);

 

   ans=reverse(ans);

 

   return ans;

}
